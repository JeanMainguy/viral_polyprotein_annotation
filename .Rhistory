fill=Cluster_with_polyprotein),
alpha=0.4) +
theme_minimal()+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title = element_text(size=22, face='bold'),
plot.caption = element_text(hjust=0, size=22), legend.position="right")+
labs(caption = capation_text)   +
scale_fill_discrete(name="Cluster with \npolyprotein") +
scale_color_discrete(name="Cluster with \npolyprotein")
p
csv_file='/home/user/mainguy/Documents/Data_Analysis/viral_polyprotein_annotation/data/clustering_result/Viruses/clustering_parameter_variation_homogeneity_evaluation/Viruses_evalue_1e-50coverage60_I1_4_homogeneity.csv'
output_dir = 'results/clustering_evaluation/homogeneity_results_merge/'
evalue = 1e-50
inflation = "1_4"
coverage = 60
capation_text = '\nClustering parameters:\n'
legend=''
data = read.csv(file = csv_file, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
data = data[data$unclassified_cluster == "False",]
data = data[data$evalue == evalue,]
output_dir = paste(output_dir, '_evalue', evalue, sep="")
capation_text = paste(capation_text, "Evalue=", evalue, sep='')
data = data[data$inflation == inflation,]
output_dir = paste(output_dir, '_I', inflation, sep="")
capation_text = paste(capation_text, " Inflation=", inflation,sep='')
data = data[data$coverage == coverage,]
output_dir = paste(output_dir, '_coverage_all', sep="")
capation_text = paste(capation_text, " Coverage=", coverage, '%', sep='')
fix_parameter = fix_parameter +1
data$coverage =  paste(data$coverage, "%")
data$inflation =  paste('I=',data$inflation)
print(fix_parameter)
print(data$inflation[1:6])
print(data$Variable_Parameter)
p = ggplot(data, aes(x=homogeneity)) + geom_density(aes(colour=inflation, group=inflation, fill=inflation), alpha=0.4) +
theme_minimal() +
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_blank(), legend.title = element_blank(),
plot.caption = element_text(hjust=0, size=22))+
labs(caption = capation_text)
output_file = paste(output_dir, '_all.png', sep ='')
p
# Comparaison between Polyprotein clusters and non-polyprotein clusters
data$Cluster_with_polyprotein = ifelse(data$nb_polyprotein == 0, 'False', 'True')
p = ggplot(data, aes(x=homogeneity)) +
geom_density(aes(colour=Cluster_with_polyprotein,
group=Cluster_with_polyprotein,
fill=Cluster_with_polyprotein),
alpha=0.4) +
theme_minimal()+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title = element_text(size=22, face='bold'),
plot.caption = element_text(hjust=0, size=22), legend.position="right")+
labs(caption = capation_text)   +
scale_fill_discrete(name="Cluster with \npolyprotein") +
scale_color_discrete(name="Cluster with \npolyprotein")
p
csv_file='/home/user/mainguy/Documents/Data_Analysis/viral_polyprotein_annotation/data/clustering_result/Viruses/clustering_parameter_variation_homogeneity_evaluation/Viruses_evalue_1e-50coverage60_I2_homogeneity.csv'
output_dir = 'results/clustering_evaluation/homogeneity_results_merge/'
evalue = 1e-50
inflation = "2"
coverage = 60
capation_text = '\nClustering parameters:\n'
legend=''
data = read.csv(file = csv_file, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
data = data[data$unclassified_cluster == "False",]
data = data[data$evalue == evalue,]
output_dir = paste(output_dir, '_evalue', evalue, sep="")
capation_text = paste(capation_text, "Evalue=", evalue, sep='')
data = data[data$inflation == inflation,]
output_dir = paste(output_dir, '_I', inflation, sep="")
capation_text = paste(capation_text, " Inflation=", inflation,sep='')
data = data[data$coverage == coverage,]
output_dir = paste(output_dir, '_coverage_all', sep="")
capation_text = paste(capation_text, " Coverage=", coverage, '%', sep='')
fix_parameter = fix_parameter +1
data$coverage =  paste(data$coverage, "%")
data$inflation =  paste('I=',data$inflation)
print(fix_parameter)
print(data$inflation[1:6])
print(data$Variable_Parameter)
p = ggplot(data, aes(x=homogeneity)) + geom_density(aes(colour=inflation, group=inflation, fill=inflation), alpha=0.4) +
theme_minimal() +
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_blank(), legend.title = element_blank(),
plot.caption = element_text(hjust=0, size=22))+
labs(caption = capation_text)
output_file = paste(output_dir, '_all.png', sep ='')
p
# Comparaison between Polyprotein clusters and non-polyprotein clusters
data$Cluster_with_polyprotein = ifelse(data$nb_polyprotein == 0, 'False', 'True')
p = ggplot(data, aes(x=homogeneity)) +
geom_density(aes(colour=Cluster_with_polyprotein,
group=Cluster_with_polyprotein,
fill=Cluster_with_polyprotein),
alpha=0.4) +
theme_minimal()+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title = element_text(size=22, face='bold'),
plot.caption = element_text(hjust=0, size=22), legend.position="right")+
labs(caption = capation_text)   +
scale_fill_discrete(name="Cluster with \npolyprotein") +
scale_color_discrete(name="Cluster with \npolyprotein")
p
csv_file="results/clustering_evaluation/homogeneity_summary_stat.csv"
coverage = 60
inflation="2.0"
evalue=1e-60
output_dir = "results/clustering_evaluation/"
data = read.csv(file = csv_file, sep = ',', header = TRUE, stringsAsFactors = TRUE)
data = data[data$type == 'poly',]
data$inflation = ifelse(grepl('_', data$inflation), gsub("_", ".", data$inflation), paste(data$inflation, '.0', sep=''))
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.8',]
#dataC = dataC[dataC$inflation == '2',]
#dataC = dataC[dataC$coverage == 20,]
dataC = dataC[dataC$evalue != 1e-100,]
dataC = dataC[dataC$evalue != 1e-120,]
dataC = dataC[dataC$evalue != 1e-70,]
dataC = dataC[dataC$evalue != 1e-40,]
dataC = dataC[dataC$evalue != 1e-20,]
dataC = dataC[dataC$evalue != 1e-60,]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
name=paste("homogeneity_median_heatmap_coverage_of_", coverage, sep='')
output_file = paste(output_dir, name,".png", sep ='')
png(filename=output_file,  width = 950, height = 950)
p
dev.off()
csv_file="results/clustering_evaluation/homogeneity_summary_stat.csv"
coverage = 60
inflation="2.0"
evalue=1e-60
output_dir = "results/clustering_evaluation/"
data = read.csv(file = csv_file, sep = ',', header = TRUE, stringsAsFactors = TRUE)
data = data[data$type == 'poly',]
data$inflation = ifelse(grepl('_', data$inflation), gsub("_", ".", data$inflation), paste(data$inflation, '.0', sep=''))
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
csv_file = "data/alignment/Viruses/RefSeq_download_date_2018-08-13/Viruses_evalue_1e-20coverage60_I1_8/stat/stat_alignments.csv"
#output_dir = "data/alignment/Viruses/RefSeq_download_date_2018-07-21/Viruses_evalue_1e-40coverage70_I2/stat/"
args = commandArgs(trailingOnly=TRUE)
output_dir = 'test/'
# test if there is at least one argument: if not, return an error
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
}  else if (length(args)==1) {
# default output file base
args[2] = "test/test_plot"
}
data = read.csv(file = csv_file, sep = '\t', header = T, stringsAsFactors = T)
I= data$inflation[1]
E=data$evalue[1]
C=data$coverage[1]
window=data$window[1]
score_threshold=data$confidence_score_threshold[1]
score_threshold=data$confidence_score_threshold[1]
caption_text = paste('\nParameters:\nWindow:', window, "    Confidence value treshold:", score_threshold,
'\ninflation:',I,
'  Evalue max',E, '  Min Coverage:',C)
valid_cluster= "Majority of cleavage site groups are valid"
invalid_cluster="None of the cleavage site groups are valid"
single_cluster = "Cluster with only one annotated polyprotein"
okish_cluster = "At least one cleavage site group is valid"
perfect_cluster = "All cleavage site groups are valid"
valid_cluster_global = 'Valid cluster'
invalid_cluster_global = 'Invalid cluster'
single = 'cluster with only one\nannotated polyprotein'
data$aln_validity_display[data$aln_validity == "Number of valid cleavage_site groups >= minimum number of cleavage site/cds annotated"] = valid_cluster
data$aln_validity_display[data$aln_validity == "None of the cleavage site groups are valid"] = invalid_cluster
data$aln_validity_display[data$aln_validity == "single annotated polyprotein"] = single_cluster
data$aln_validity_display[data$aln_validity == "All cleavage sites groups have a good score"] = perfect_cluster
data$aln_validity_display[data$aln_validity == "At least one cleavage site group is valid"] = okish_cluster
data$global_category[data$aln_validity == "Number of valid cleavage_site groups >= minimum number of cleavage site/cds annotated"] = valid_cluster_global
data$global_category[data$aln_validity == "All cleavage sites groups have a good score"] = valid_cluster_global
data$global_category[data$aln_validity == "At least one cleavage site group is valid"] = valid_cluster_global
data$global_category[data$aln_validity == "single annotated polyprotein"] = single
data$global_category[data$aln_validity == "None of the cleavage site groups are valid"] = invalid_cluster_global
table_status = data.frame( table(data$global_category,data$aln_validity_display ))
colnames(table_status) = c("cluster_validity_global","cluster_validity", 'number_of_cluster')
order_category = c(perfect_cluster, valid_cluster ,okish_cluster, single_cluster, invalid_cluster)
table_status$cluster_validity = factor(table_status$cluster_validity, levels = order_category)
p<-ggplot(data=table_status, aes(x=cluster_validity_global, y=number_of_cluster, fill=cluster_validity)) +
geom_bar(stat="identity") +
theme_minimal() +
labs(x =NULL, y="Number of clusters", fill="Cluster categories", caption = caption_text) +
theme(axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold"), legend.text = element_text( size=15), legend.title = element_text(size=18,face="bold"),
plot.caption = element_text(hjust=0, size=15) )+
scale_x_discrete(limits=c(valid_cluster_global,  single, invalid_cluster_global))
p = p+scale_fill_manual(values=c('forestgreen',   "dodgerblue3", "darkviolet", "dimgrey",  "firebrick3" )) #green-yellow yellow grey green
#c(perfect_cluster, valid_cluster ,okish_cluster, single_cluster, invalid_cluster))
p
valid_cluster_global = 'Unannotated cds\nfrom valid cluster'
invalid_cluster_global = 'Unannotated cds\nfrom invalid cluster'
single = 'Unannotated cds\nfrom cluster with\nonly one\nannotated polyprotein'
data$global_category_prot = valid_cluster
data$global_category_prot[data$aln_validity == "Number of valid cleavage_site groups >= minimum number of cleavage site/cds annotated"] = valid_cluster_global
data$global_category_prot[data$aln_validity == "All cleavage sites groups have a good score"] = valid_cluster_global
data$global_category_prot[data$aln_validity == "At least one cleavage site group is valid"] = valid_cluster_global
data$global_category_prot[data$aln_validity == "single annotated polyprotein"] = single
data$global_category_prot[data$aln_validity == "None of the cleavage site groups are valid"] = invalid_cluster_global
table_status = data.frame( table(data$global_category_prot,data$aln_validity_display))
colnames(table_status) = c("cluster_validity_global","cluster_validity", 'number_of_cluster')
order_category = c(perfect_cluster, valid_cluster ,okish_cluster, single_cluster, invalid_cluster)
table_status$cluster_validity = factor(table_status$cluster_validity, levels = order_category)
table_status$nb_unannotated_seq = 0
table_status$nb_unannotated_seq[table_status$cluster_validity ==  valid_cluster & table_status$number_of_cluster >  0] = sum(data$nb_unannotated_seq[data$aln_validity_display == valid_cluster] )
table_status$nb_unannotated_seq[table_status$cluster_validity ==  invalid_cluster & table_status$number_of_cluster >  0] = sum(data$nb_unannotated_seq[data$aln_validity_display == invalid_cluster] )
table_status$nb_unannotated_seq[table_status$cluster_validity ==  okish_cluster & table_status$number_of_cluster >  0] = sum(data$nb_unannotated_seq[data$aln_validity_display == okish_cluster] )
table_status$nb_unannotated_seq[table_status$cluster_validity ==  single_cluster & table_status$number_of_cluster >  0] = sum(data$nb_unannotated_seq[data$aln_validity_display == single_cluster] )
table_status$nb_unannotated_seq[table_status$cluster_validity ==  perfect_cluster & table_status$number_of_cluster >  0] = sum(data$nb_unannotated_seq[data$aln_validity_display == perfect_cluster] )
p<-ggplot(data=table_status, aes(x=cluster_validity_global, y=nb_unannotated_seq, fill=cluster_validity)) +
geom_bar(stat="identity") +
theme_minimal() +
labs(x =NULL, y="Number of unnannotated cds", fill="Cluster categories", caption = caption_text) +
theme(axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold"), legend.text = element_text( size=15), legend.title = element_text(size=18,face="bold"),
plot.caption = element_text(hjust=0, size=15) )+
scale_x_discrete(limits=c(valid_cluster_global,  single, invalid_cluster_global))
p = p+scale_fill_manual(values=c('forestgreen',   "dodgerblue3", "darkviolet", "dimgrey",  "firebrick3" )) #green-yellow yellow grey green
#c(perfect_cluster, valid_cluster ,okish_cluster, single_cluster, invalid_cluster))
p
csv_file="results/clustering_evaluation/homogeneity_summary_stat.csv"
coverage = 60
inflation="2.0"
evalue=1e-60
output_dir = "results/clustering_evaluation/"
data = read.csv(file = csv_file, sep = ',', header = TRUE, stringsAsFactors = TRUE)
data = data[data$type == 'poly',]
data$inflation = ifelse(grepl('_', data$inflation), gsub("_", ".", data$inflation), paste(data$inflation, '.0', sep=''))
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.8',]
#dataC = dataC[dataC$inflation == '2',]
#dataC = dataC[dataC$coverage == 20,]
dataC = dataC[dataC$evalue != 1e-100,]
dataC = dataC[dataC$evalue != 1e-120,]
dataC = dataC[dataC$evalue != 1e-70,]
dataC = dataC[dataC$evalue != 1e-40,]
dataC = dataC[dataC$evalue != 1e-20,]
dataC = dataC[dataC$evalue != 1e-60,]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.6',]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.6',]
#dataC = dataC[dataC$inflation == '2',]
#dataC = dataC[dataC$coverage == 20,]
dataC = dataC[dataC$evalue != 1e-100,]
dataC = dataC[dataC$evalue != 1e-140,]
dataC = dataC[dataC$evalue != 1e-70,]
dataC = dataC[dataC$evalue != 1e-50,]
dataC = dataC[dataC$evalue != 1e-30,]
dataC = dataC[dataC$evalue != 1e-10,]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
data_all = data
data_all = data_all[data_all$inflation != '1.8',]
#data_all = data_all[data_all$inflation == '2',]
#data_all = data_all[data_all$coverage == 20,]
data_all = data_all[data_all$evalue != 1e-100,]
data_all = data_all[data_all$evalue != 1e-120,]
#data_all = data_all[data_all$evalue != 1e-70,]
#data_all = data_all[data_all$evalue != 1e-40,]
#data_all = data_all[data_all$evalue != 1e-20,]
#data_all = data_all[data_all$evalue != 1e-60,]
data_all = data_all[data_all$evalue != 1e-10,]
data_all = data_all[data_all$coverage != 10,]
#data_all = data_all[data_all$evalue != 1e-10,]
data_all$coverage =paste(data_all$coverage, '%', sep='')
data_all$coverage_inflation = paste(data_all$coverage, 'I=',data_all$inflation)
p = ggplot(data_all, aes(x=reorder(evalue, evalue), y=coverage_inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',  midpoint = 0.6, limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Coverage and Inflation", fill="Homogeneity\nmedian", x="Evalue")
p
p = ggplot(data_all, aes(x=reorder(evalue, evalue), y=coverage_inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$median) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Coverage and Inflation", fill="Homogeneity\nmedian", x="Evalue")
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$median) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(dataC$median) + ( max(dataC$median) - min(dataC$median))/2 ,
limit=c(min(dataC$median),max(dataC$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(dataC$median) + ( max(dataC$median) - min(dataC$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(dataC$median) + ( max(dataC$median) - min(dataC$median))/2 ,
limit=c(min(dataC$median),1))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$median) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=mean)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$mean) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
dataC$median = dataC$mean
data$median = data$mean
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$mean) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
data = read.csv(file = csv_file, sep = ',', header = TRUE, stringsAsFactors = TRUE)
data = data[data$type == 'poly',]
data$inflation = ifelse(grepl('_', data$inflation), gsub("_", ".", data$inflation), paste(data$inflation, '.0', sep=''))
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.6',]
#dataC = dataC[dataC$inflation == '2',]
#dataC = dataC[dataC$coverage == 20,]
dataC = dataC[dataC$evalue != 1e-100,]
dataC = dataC[dataC$evalue != 1e-140,]
dataC = dataC[dataC$evalue != 1e-70,]
dataC = dataC[dataC$evalue != 1e-50,]
dataC = dataC[dataC$evalue != 1e-30,]
dataC = dataC[dataC$evalue != 1e-10,]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$mean) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
csv_file="results/clustering_evaluation/homogeneity_summary_stat.csv"
coverage = 60
inflation="2.0"
evalue=1e-60
output_dir = "results/clustering_evaluation/"
data = read.csv(file = csv_file, sep = ',', header = TRUE, stringsAsFactors = TRUE)
data = data[data$type == 'poly',]
data$inflation = ifelse(grepl('_', data$inflation), gsub("_", ".", data$inflation), paste(data$inflation, '.0', sep=''))
dataC = data[data$coverage == coverage,]
caption_text = paste('\nCoverage threshold:',coverage, '%' )
#Filter some of  to display less dataC
dataC = dataC[dataC$inflation != '1.6',]
#dataC = dataC[dataC$inflation == '2',]
#dataC = dataC[dataC$coverage == 20,]
dataC = dataC[dataC$evalue != 1e-100,]
dataC = dataC[dataC$evalue != 1e-140,]
dataC = dataC[dataC$evalue != 1e-70,]
dataC = dataC[dataC$evalue != 1e-50,]
dataC = dataC[dataC$evalue != 1e-30,]
dataC = dataC[dataC$evalue != 1e-10,]
#dataC$inflation =  paste('I=',dataC$inflation, sep='')
dataC$coverage =  paste(dataC$coverage, "%")
dataC$evalue_s = paste('Evalue', dataC$evalue)
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$mean) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
p = ggplot(dataC, aes(x=reorder(evalue, evalue), y=inflation, z=median)) +
geom_tile(aes(fill = median))+
scale_fill_gradient2(low = "yellow", high = "blue",mid='green',
midpoint = min(data$median) + ( max(data$median) - min(data$median))/2 ,
limit=c(min(data$median),max(data$median)))+
theme(axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20), axis.title=element_text(size=22,face="bold"),
legend.text = element_text( size=20), legend.title =element_text(size=22,face="bold"),
plot.caption = element_text(hjust=0, size=22))+
labs( y="Inflation", fill="Homogeneity\nmedian", x="Evalue", caption = caption_text)
p
